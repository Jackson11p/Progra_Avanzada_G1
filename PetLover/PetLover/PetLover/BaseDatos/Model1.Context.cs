//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PetLover.BaseDatos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PetLoverEntities : DbContext
    {
        public PetLoverEntities()
            : base("name=PetLoverEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cita> Citas { get; set; }
        public virtual DbSet<CitaTratamiento> CitaTratamientos { get; set; }
        public virtual DbSet<Error> Errors { get; set; }
        public virtual DbSet<EstadosCita> EstadosCitas { get; set; }
        public virtual DbSet<HistorialMedico> HistorialMedicoes { get; set; }
        public virtual DbSet<Mascota> Mascotas { get; set; }
        public virtual DbSet<Perfil> Perfils { get; set; }
        public virtual DbSet<Tratamiento> Tratamientos { get; set; }
        public virtual DbSet<Usuario> Usuarios { get; set; }
    
        public virtual int ActualizarCita(Nullable<int> citaID, Nullable<System.DateTime> fechaHora, Nullable<int> mascotaID, Nullable<int> veterinarioID, string descripcion, Nullable<int> estado)
        {
            var citaIDParameter = citaID.HasValue ?
                new ObjectParameter("CitaID", citaID) :
                new ObjectParameter("CitaID", typeof(int));
    
            var fechaHoraParameter = fechaHora.HasValue ?
                new ObjectParameter("FechaHora", fechaHora) :
                new ObjectParameter("FechaHora", typeof(System.DateTime));
    
            var mascotaIDParameter = mascotaID.HasValue ?
                new ObjectParameter("MascotaID", mascotaID) :
                new ObjectParameter("MascotaID", typeof(int));
    
            var veterinarioIDParameter = veterinarioID.HasValue ?
                new ObjectParameter("VeterinarioID", veterinarioID) :
                new ObjectParameter("VeterinarioID", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarCita", citaIDParameter, fechaHoraParameter, mascotaIDParameter, veterinarioIDParameter, descripcionParameter, estadoParameter);
        }
    
        public virtual int ActualizarCitaTratamiento(Nullable<int> citaID, Nullable<int> tratamientoID_Anterior, Nullable<int> tratamientoID_Nuevo)
        {
            var citaIDParameter = citaID.HasValue ?
                new ObjectParameter("CitaID", citaID) :
                new ObjectParameter("CitaID", typeof(int));
    
            var tratamientoID_AnteriorParameter = tratamientoID_Anterior.HasValue ?
                new ObjectParameter("TratamientoID_Anterior", tratamientoID_Anterior) :
                new ObjectParameter("TratamientoID_Anterior", typeof(int));
    
            var tratamientoID_NuevoParameter = tratamientoID_Nuevo.HasValue ?
                new ObjectParameter("TratamientoID_Nuevo", tratamientoID_Nuevo) :
                new ObjectParameter("TratamientoID_Nuevo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarCitaTratamiento", citaIDParameter, tratamientoID_AnteriorParameter, tratamientoID_NuevoParameter);
        }
    
        public virtual int ActualizarContrasenna(string correo, string nuevaContrasenna)
        {
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var nuevaContrasennaParameter = nuevaContrasenna != null ?
                new ObjectParameter("NuevaContrasenna", nuevaContrasenna) :
                new ObjectParameter("NuevaContrasenna", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarContrasenna", correoParameter, nuevaContrasennaParameter);
        }
    
        public virtual int ActualizarImagenMascota(Nullable<int> mascotaID, string rutaImagen)
        {
            var mascotaIDParameter = mascotaID.HasValue ?
                new ObjectParameter("MascotaID", mascotaID) :
                new ObjectParameter("MascotaID", typeof(int));
    
            var rutaImagenParameter = rutaImagen != null ?
                new ObjectParameter("RutaImagen", rutaImagen) :
                new ObjectParameter("RutaImagen", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarImagenMascota", mascotaIDParameter, rutaImagenParameter);
        }
    
        public virtual int ActualizarMascota(Nullable<int> mascotaID, string nombre, string especie, string raza, Nullable<System.DateTime> fechaNacimiento, Nullable<bool> estado, Nullable<int> iDUsuario, string imagen)
        {
            var mascotaIDParameter = mascotaID.HasValue ?
                new ObjectParameter("MascotaID", mascotaID) :
                new ObjectParameter("MascotaID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var especieParameter = especie != null ?
                new ObjectParameter("Especie", especie) :
                new ObjectParameter("Especie", typeof(string));
    
            var razaParameter = raza != null ?
                new ObjectParameter("Raza", raza) :
                new ObjectParameter("Raza", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(bool));
    
            var iDUsuarioParameter = iDUsuario.HasValue ?
                new ObjectParameter("IDUsuario", iDUsuario) :
                new ObjectParameter("IDUsuario", typeof(int));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("Imagen", imagen) :
                new ObjectParameter("Imagen", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarMascota", mascotaIDParameter, nombreParameter, especieParameter, razaParameter, fechaNacimientoParameter, estadoParameter, iDUsuarioParameter, imagenParameter);
        }
    
        public virtual int ActualizarTratamiento(Nullable<int> tratamientoID, string nombre, string descripcion, Nullable<decimal> costo, Nullable<bool> estado)
        {
            var tratamientoIDParameter = tratamientoID.HasValue ?
                new ObjectParameter("TratamientoID", tratamientoID) :
                new ObjectParameter("TratamientoID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var costoParameter = costo.HasValue ?
                new ObjectParameter("Costo", costo) :
                new ObjectParameter("Costo", typeof(decimal));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarTratamiento", tratamientoIDParameter, nombreParameter, descripcionParameter, costoParameter, estadoParameter);
        }
    
        public virtual int ActualizarUsuario(Nullable<int> usuarioID, string identificacion, string nombre, string correo, string telefono, Nullable<bool> estado, Nullable<int> idPerfil)
        {
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            var identificacionParameter = identificacion != null ?
                new ObjectParameter("Identificacion", identificacion) :
                new ObjectParameter("Identificacion", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(bool));
    
            var idPerfilParameter = idPerfil.HasValue ?
                new ObjectParameter("IdPerfil", idPerfil) :
                new ObjectParameter("IdPerfil", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarUsuario", usuarioIDParameter, identificacionParameter, nombreParameter, correoParameter, telefonoParameter, estadoParameter, idPerfilParameter);
        }
    
        public virtual ObjectResult<CargarCitas_Result> CargarCitas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CargarCitas_Result>("CargarCitas");
        }
    
        public virtual ObjectResult<CargarCitasParaHistorial_Result> CargarCitasParaHistorial()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CargarCitasParaHistorial_Result>("CargarCitasParaHistorial");
        }
    
        public virtual ObjectResult<CargarEstadosCita_Result> CargarEstadosCita()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CargarEstadosCita_Result>("CargarEstadosCita");
        }
    
        public virtual ObjectResult<CargarMascotas_Result> CargarMascotas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CargarMascotas_Result>("CargarMascotas");
        }
    
        public virtual ObjectResult<CargarPerfiles_Result> CargarPerfiles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CargarPerfiles_Result>("CargarPerfiles");
        }
    
        public virtual ObjectResult<CargarTratamientos_Result> CargarTratamientos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CargarTratamientos_Result>("CargarTratamientos");
        }
    
        public virtual ObjectResult<CargarUsuarios_Result> CargarUsuarios()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CargarUsuarios_Result>("CargarUsuarios");
        }
    
        public virtual ObjectResult<CargarVeterinarios_Result> CargarVeterinarios()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CargarVeterinarios_Result>("CargarVeterinarios");
        }
    
        public virtual ObjectResult<ConsultarCitasFuturas_Result> ConsultarCitasFuturas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarCitasFuturas_Result>("ConsultarCitasFuturas");
        }
    
        public virtual ObjectResult<ConsultarCitasPasadasOCanceladas_Result> ConsultarCitasPasadasOCanceladas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarCitasPasadasOCanceladas_Result>("ConsultarCitasPasadasOCanceladas");
        }
    
        public virtual ObjectResult<ConsultarCitasPorVeterinario_Result> ConsultarCitasPorVeterinario(Nullable<int> usuarioID)
        {
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarCitasPorVeterinario_Result>("ConsultarCitasPorVeterinario", usuarioIDParameter);
        }
    
        public virtual ObjectResult<ConsultarCitasTratamientos_Result> ConsultarCitasTratamientos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarCitasTratamientos_Result>("ConsultarCitasTratamientos");
        }
    
        public virtual ObjectResult<ConsultarClientes_Result> ConsultarClientes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarClientes_Result>("ConsultarClientes");
        }
    
        public virtual ObjectResult<ConsultarHistorialMedico_Result> ConsultarHistorialMedico()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarHistorialMedico_Result>("ConsultarHistorialMedico");
        }
    
        public virtual ObjectResult<ConsultarMascotas_Result> ConsultarMascotas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarMascotas_Result>("ConsultarMascotas");
        }
    
        public virtual ObjectResult<ConsultarMascotasInactivas_Result> ConsultarMascotasInactivas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarMascotasInactivas_Result>("ConsultarMascotasInactivas");
        }
    
        public virtual ObjectResult<ConsultarMascotasPorUsuario_Result> ConsultarMascotasPorUsuario(Nullable<int> usuarioID)
        {
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarMascotasPorUsuario_Result>("ConsultarMascotasPorUsuario", usuarioIDParameter);
        }
    
        public virtual ObjectResult<ConsultarPerfiles_Result> ConsultarPerfiles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarPerfiles_Result>("ConsultarPerfiles");
        }
    
        public virtual ObjectResult<ConsultarTratamientos_Result> ConsultarTratamientos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarTratamientos_Result>("ConsultarTratamientos");
        }
    
        public virtual ObjectResult<ConsultarTratamientosInactivos_Result> ConsultarTratamientosInactivos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarTratamientosInactivos_Result>("ConsultarTratamientosInactivos");
        }
    
        public virtual ObjectResult<ConsultarUsuarios_Result> ConsultarUsuarios()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarUsuarios_Result>("ConsultarUsuarios");
        }
    
        public virtual int EliminarCitaTratamiento(Nullable<int> citaID, Nullable<int> tratamientoID)
        {
            var citaIDParameter = citaID.HasValue ?
                new ObjectParameter("CitaID", citaID) :
                new ObjectParameter("CitaID", typeof(int));
    
            var tratamientoIDParameter = tratamientoID.HasValue ?
                new ObjectParameter("TratamientoID", tratamientoID) :
                new ObjectParameter("TratamientoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarCitaTratamiento", citaIDParameter, tratamientoIDParameter);
        }
    
        public virtual ObjectResult<IniciarSesion_Result> IniciarSesion(string correo, string contrasenna)
        {
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var contrasennaParameter = contrasenna != null ?
                new ObjectParameter("Contrasenna", contrasenna) :
                new ObjectParameter("Contrasenna", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IniciarSesion_Result>("IniciarSesion", correoParameter, contrasennaParameter);
        }
    
        public virtual int InsertarMascota(string nombre, string especie, string raza, Nullable<System.DateTime> fechaNacimiento, Nullable<int> clienteID)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var especieParameter = especie != null ?
                new ObjectParameter("Especie", especie) :
                new ObjectParameter("Especie", typeof(string));
    
            var razaParameter = raza != null ?
                new ObjectParameter("Raza", raza) :
                new ObjectParameter("Raza", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarMascota", nombreParameter, especieParameter, razaParameter, fechaNacimientoParameter, clienteIDParameter);
        }
    
        public virtual ObjectResult<MostrarPerfiles_Result> MostrarPerfiles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MostrarPerfiles_Result>("MostrarPerfiles");
        }
    
        public virtual ObjectResult<MostrasUsuarios_Result> MostrasUsuarios()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MostrasUsuarios_Result>("MostrasUsuarios");
        }
    
        public virtual ObjectResult<Nullable<decimal>> ObtenerMontoTotalCita(Nullable<int> citaID)
        {
            var citaIDParameter = citaID.HasValue ?
                new ObjectParameter("CitaID", citaID) :
                new ObjectParameter("CitaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("ObtenerMontoTotalCita", citaIDParameter);
        }
    
        public virtual int RegistrarCita(Nullable<System.DateTime> fechaHora, Nullable<int> mascotaID, Nullable<int> veterinarioID, string descripcion, Nullable<int> estado)
        {
            var fechaHoraParameter = fechaHora.HasValue ?
                new ObjectParameter("FechaHora", fechaHora) :
                new ObjectParameter("FechaHora", typeof(System.DateTime));
    
            var mascotaIDParameter = mascotaID.HasValue ?
                new ObjectParameter("MascotaID", mascotaID) :
                new ObjectParameter("MascotaID", typeof(int));
    
            var veterinarioIDParameter = veterinarioID.HasValue ?
                new ObjectParameter("VeterinarioID", veterinarioID) :
                new ObjectParameter("VeterinarioID", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarCita", fechaHoraParameter, mascotaIDParameter, veterinarioIDParameter, descripcionParameter, estadoParameter);
        }
    
        public virtual int RegistrarCitaTratamiento(Nullable<int> citaID, Nullable<int> tratamientoID)
        {
            var citaIDParameter = citaID.HasValue ?
                new ObjectParameter("CitaID", citaID) :
                new ObjectParameter("CitaID", typeof(int));
    
            var tratamientoIDParameter = tratamientoID.HasValue ?
                new ObjectParameter("TratamientoID", tratamientoID) :
                new ObjectParameter("TratamientoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarCitaTratamiento", citaIDParameter, tratamientoIDParameter);
        }
    
        public virtual int RegistrarCuenta(string identificacion, string contrasenna, string nombre, string correo, string telefono)
        {
            var identificacionParameter = identificacion != null ?
                new ObjectParameter("Identificacion", identificacion) :
                new ObjectParameter("Identificacion", typeof(string));
    
            var contrasennaParameter = contrasenna != null ?
                new ObjectParameter("Contrasenna", contrasenna) :
                new ObjectParameter("Contrasenna", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarCuenta", identificacionParameter, contrasennaParameter, nombreParameter, correoParameter, telefonoParameter);
        }
    
        public virtual int RegistrarError(Nullable<long> idUsuario, string mensaje, string origen)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(long));
    
            var mensajeParameter = mensaje != null ?
                new ObjectParameter("Mensaje", mensaje) :
                new ObjectParameter("Mensaje", typeof(string));
    
            var origenParameter = origen != null ?
                new ObjectParameter("Origen", origen) :
                new ObjectParameter("Origen", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarError", idUsuarioParameter, mensajeParameter, origenParameter);
        }
    
        public virtual int RegistrarHistorialMedico(Nullable<int> citaID, string diagnostico)
        {
            var citaIDParameter = citaID.HasValue ?
                new ObjectParameter("CitaID", citaID) :
                new ObjectParameter("CitaID", typeof(int));
    
            var diagnosticoParameter = diagnostico != null ?
                new ObjectParameter("Diagnostico", diagnostico) :
                new ObjectParameter("Diagnostico", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarHistorialMedico", citaIDParameter, diagnosticoParameter);
        }
    
        public virtual int RegistrarMascota(string nombre, string especie, string raza, Nullable<System.DateTime> fechaNacimiento, Nullable<bool> estado, Nullable<int> iDUsuario, string imagen)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var especieParameter = especie != null ?
                new ObjectParameter("Especie", especie) :
                new ObjectParameter("Especie", typeof(string));
    
            var razaParameter = raza != null ?
                new ObjectParameter("Raza", raza) :
                new ObjectParameter("Raza", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(bool));
    
            var iDUsuarioParameter = iDUsuario.HasValue ?
                new ObjectParameter("IDUsuario", iDUsuario) :
                new ObjectParameter("IDUsuario", typeof(int));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("Imagen", imagen) :
                new ObjectParameter("Imagen", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarMascota", nombreParameter, especieParameter, razaParameter, fechaNacimientoParameter, estadoParameter, iDUsuarioParameter, imagenParameter);
        }
    
        public virtual int RegistrarTratamiento(string nombre, string descripcion, Nullable<decimal> costo, Nullable<bool> estado)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var costoParameter = costo.HasValue ?
                new ObjectParameter("Costo", costo) :
                new ObjectParameter("Costo", typeof(decimal));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarTratamiento", nombreParameter, descripcionParameter, costoParameter, estadoParameter);
        }
    }
}
